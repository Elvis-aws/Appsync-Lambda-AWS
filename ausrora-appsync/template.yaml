AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: appsync aurora

Parameters:
  Prefix:
    Type: String
    Default: appsync
  DBTableName:
    Type: String
    Default: Pets-Table
  CodeS3Bucket:
    Type: String
    Default: appsync-app-appsync-bucket


Resources:
##############################################
####################### VPC ###################
##############################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
##############################################
############### Private Subnets ##############
##############################################
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
##############################################
############### CodeS3Bucket ###############
##############################################
#  CodeS3Bucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      AccessControl: Private
#      BucketName: !Sub ${AWS::StackName}-appsync-bucket
      # appsync-app-appsync-bucket
      # folder name: appsync
      # layer.zip

##############################################
############### Security Group ###############
##############################################
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-DBSecurityGroup
      GroupDescription: DBSecurityGroup.
      VpcId: !Ref VPC
##############################################
############ Lambda-Layer-Version ############
##############################################
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Sub ${Prefix}/layer.zip
      Description: !Sub ${AWS::StackName}-This is lambda layer
      LayerName: !Sub ${AWS::StackName}-LambdaLayer
##############################################
############## Lambda-Functions ##############
##############################################
  Function1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function1
      Environment:
        Variables:
          API_KEY: !GetAtt ApiKey.ApiKey
          GRAPHQL_URL: GraphQLApi.GraphQLUrl
      Handler: src/app.lambda_handler
      Role: !GetAtt FunctionRole1.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Sub ${Prefix}/deploy.zip
      Timeout: 50
      MemorySize: 128
      Runtime: python3.9
      Layers:
        - !Ref LambdaLayer

  Function2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function2
      Handler: src/app.lambda_handler
      Role: !GetAtt FunctionRole2.Arn
      Timeout: 50
      MemorySize: 128
      Runtime: python3.9
      Environment:
        Variables:
          DBCLUSTER_ARN: !Ref DBCluster
          DBNAME: auroradb
          DBTABLE: !Ref DBTableName
          SECRET_ARN: !Ref Secret
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import os
          
          dbcluster_arn = os.environ['DBCLUSTER_ARN']
          dbname = os.environ['DBNAME']
          dbtable = os.environ['DBTABLE']
          region = os.environ['REGION']
          secret_arn = os.environ['SECRET_ARN']
          
          sql1 = 'create table {table}(id varchar(200), type varchar(200), price float)'.format(table=dbtable)
          client = boto3.client('rds-data', region_name=region)
          schema = 'mysql'
          
          CREATE = 'Create'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              now = datetime.datetime.now()
              message = '{datetime} Request Type: {request_type}, Test Resource Property: {property}'.format(
                datetime=now,
                request_type=event['RequestType'],
                property=event['ResourceProperties']['TestProperty'])
              print(message)
          
              if event['RequestType'] == CREATE:
                response1 = client.execute_statement(
                  database=dbname,
                  resourceArn=dbcluster_arn,
                  schema=schema,
                  secretArn=secret_arn,
                  sql=sql1
                )
                print(response1)
          
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
          
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
##############################################
################ Lambda-Roles ################
##############################################
  FunctionRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FunctionRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AuroraServerlessDataAPIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref Secret
              - Effect: Allow
                Action:
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:ExecuteStatement
                  - rds-data:RollbackTransaction
                Resource:
                  - "*"
##############################################
################## Lambda-Url ################
##############################################
  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt Function1.Arn
##############################################
############### Lambda-Permission ############
##############################################
  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt Function1.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"
##############################################
################ Custom-Resource ################
##############################################
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: Function2
    Properties:
      ServiceToken: !GetAtt Function2.Arn
      TestProperty: !Ref Prefix
##############################################
################ Secrets ################
##############################################
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-Secret
      SecretString: !Sub '{"username":"username","password":"password"}'

##############################################
################ Graph-QL-Api ################
##############################################
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub ${AWS::StackName}-GraphQLApi
##############################################
################ Data Source #################
##############################################
  DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DataSource
      RelationalDatabaseConfig:
        RdsHttpEndpointConfig:
          AwsRegion: !Ref AWS::Region
          AwsSecretStoreArn: !Ref Secret
          DatabaseName: auroradb
          DbClusterIdentifier: !Ref DBCluster
        RelationalDatabaseSourceType: RDS_HTTP_ENDPOINT
      ServiceRoleArn: !GetAtt DataSourceRole.Arn
      Type: RELATIONAL_DATABASE
##############################################
############## Graph-Ql-Schema ###############
##############################################
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type Mutation {
          createPet(input: CreatePetInput!): Pet
          updatePet(input: UpdatePetInput!): Pet
          deletePet(input: DeletePetInput!): Pet
        }
        
        input CreatePetInput {
            type: PetType
            price: Float!
        }
        
        input UpdatePetInput {
        id: ID!
            type: PetType
            price: Float!
        }
        
        input DeletePetInput {
            id: ID!
        }
        
        type Pet {
            id: ID!
            type: PetType
            price: Float
        }
        
        enum PetType {
            dog
            cat
            fish
            bird
            gecko
        }
        
        type Query {
            getPet(id: ID!): Pet
            listPets: [Pet]
            listPetsByPriceRange(min: Float, max: Float): [Pet]
        }
        
        schema {
            query: Query
            mutation: Mutation
        }
##############################################
################# Resolver ###################
##############################################
  CreatePetResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: createPet
      Kind: UNIT
      RequestMappingTemplate: |
        #set($id=$utils.autoId())
        {
            "version": "2018-05-29",
            "statements": [
                "insert into Pets VALUES ('$id', '$ctx.args.input.type', $ctx.args.input.price)",
                "select * from Pets WHERE id = '$id'"
            ]
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])
      TypeName: Mutation
##############################################
############## Update Resolver ###############
##############################################
  UpdatePetResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: updatePet
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "statements": [
              $util.toJson("update Pets set type='$ctx.args.input.type', price=$ctx.args.input.price WHERE id='$ctx.args.input.id'"),
              $util.toJson("select * from Pets WHERE id = '$ctx.args.input.id'")
          ]
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])
      TypeName: Mutation
##############################################
############## Delete Resolver ###############
##############################################
  DeletePetResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: deletePet
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "statements": [
              $util.toJson("select * from Pets WHERE id='$ctx.args.input.id'"),
              $util.toJson("delete from Pets WHERE id='$ctx.args.input.id'")
          ]
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])
      TypeName: Mutation
##############################################
############## Get Resolver ###############
##############################################
  GetPetResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: getPet
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
              "statements": [
                  $util.toJson("select * from Pets WHERE id='$ctx.args.id'")
          ]
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0][0])
      TypeName: Query
##############################################
################ List Resolver ###############
##############################################
  ListPetsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: listPets
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "statements": [
              "select * from Pets"
          ]
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])
      TypeName: Query
##############################################
############## List By Resolver ##############
##############################################
  ListPetsByPriceRangeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: listPetsByPriceRange
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "statements": [
                  "select * from Pets where price > :MIN and price < :MAX"
          ],
      
          "variableMap": {
              ":MAX": $util.toJson($ctx.args.max),
              ":MIN": $util.toJson($ctx.args.min)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])
      TypeName: Query
##############################################
############## API Key ###############
##############################################
  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
     ApiId: !GetAtt GraphQLApi.ApiId
##############################################
############## Data Source Role ##############
##############################################
  DataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-DataSourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:DeleteItems
                  - rds-data:ExecuteSql
                  - rds-data:ExecuteStatement
                  - rds-data:GetItems
                  - rds-data:InsertItems
                  - rds-data:UpdateItems
                Resource:
                  - "*"
#                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBCluster
#                  - !Sub $(Fn::GetAtt:[DBCluster, Arn]):*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - "*"
#                  - !Ref Secret
#                  - !Sub $$(Fn::GetAtt:[Secret, Arn]):*
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: dbsubnetgroup
      DBSubnetGroupDescription: test subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: auroradb
      DBClusterIdentifier: !Sub ${Prefix}-dbcluster
      DBSubnetGroupName: !Ref DBSubnetGroup
      EnableHttpEndpoint: true
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: 5.7.mysql_aurora.2.07.1
      MasterUsername: username
      MasterUserPassword: password
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
##############################################
##############################################
Outputs:
  ApiKey:
    Value: !GetAtt ApiKey.ApiKey
