AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Appsync lambda

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.9
    Tracing: Active
    CodeUri: src/

Resources:
##############################################
################# Graph-QL API ###############
##############################################
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub ${AWS::StackName}-graphqlapi
##############################################
################ Appsync Apikey ##############
##############################################
  AppsyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Description: My API Key
      Expires: 1699995307
# https://www.epochconverter.com/
# In 5 months as of "29 June 2023"
##############################################
################ Data-Source #################
##############################################
  DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DataSourceLambda.Arn
      Name: DataSource
      ServiceRoleArn: !GetAtt DataSourceRole.Arn
      Type: AWS_LAMBDA  # Here lambda is used as the data source
##############################################
############## Graph-QL Schema ###############
##############################################
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
        }

        type Query {
          listS3Objects: [S3Object]
        }

        type Mutation {
          putS3Object: S3Object
          deleteS3Object(Key: String!): S3Object
        }

        type S3Object {
          Key: String!
          LastModified: String
          Size: Int
          ETag: String
        }
##############################################
############ Put S3 Object Resolver ##########
##############################################
  PutS3ObjectResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: putS3Object
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "Put"
          }
        }
      ResponseMappingTemplate: |
        $context.result
      TypeName: Mutation
##############################################
######### Delete S3 Object Resolver ##########
##############################################
  DeleteS3ObjectResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: deleteS3Object
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "Delete",
            "arguments": $utils.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $context.result
      TypeName: Mutation
##############################################
########### List S3 Object Resolver ##########
##############################################
  ListS3ObjectsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DataSource.Name
      FieldName: listS3Objects
      Kind: UNIT
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "List"
          }
        }
      ResponseMappingTemplate: |
        $context.result
      TypeName: Query
##############################################
########## appsync Lambda Role ###########
##############################################
  DataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-dataSourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt DataSourceLambda.Arn
# Permission is granted for AppSync to execute a Lambda function that is set as a data source.
##############################################
############## Data Source Lambda ############
##############################################
  DataSourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-datasourcelambda
      Role: !GetAtt DataSourceLambdaRole.Arn
      Handler: datasource.source_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
##############################################
########### DataSource Lambda Role ###########
##############################################
  DataSourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Sub "${S3Bucket.Arn}/*"
##############################################
########### GraphQL Lambda Client ############
##############################################
  GraphQLClientLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-graphqlclientlambda
      Role: !GetAtt GraphQLClientLambdaRole.Arn
      Handler: clientexecute.execute_handler
      Environment:
        Variables:
          API_KEY: !GetAtt AppsyncApiKey.ApiKey
          GRAPHQL_URL: !GetAtt GraphQLApi.GraphQLUrl
##############################################
######### GraphQL Execute Lambda Role ########
##############################################
  GraphQLClientLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-cloudwatch-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
##############################################
######### GraphQL Execute Lambda URL #########
##############################################
  GraphQLExecuteLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt GraphQLClientLambda.Arn
##############################################
###### GraphQ LExecute Lambda Permission #####
##############################################
  GraphQLExecuteLambdaUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt GraphQLClientLambda.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"
##############################################
################ Lambda Layer ################
##############################################
#  LambdaLayer:
#    Type: AWS::Lambda::LayerVersion
#    Properties:
#      CompatibleRuntimes:
#        - python3.9
#      Content:
#        S3Bucket: !Ref S3LayerBucket
#        S3Key: lambdalayer.zip
#      Description: Lambda layer
#      LayerName: !Sub ${AWS::StackName}-layer
# Create folder
  # mkdir layer
# use pip3 instll to install all dependencies
  # pip3 install boto3
  # sudo pip3 install --pre "gql[all]" -t python
  # pip3 install datetime
# zip file
  # zip lambdalayer.zip -r python
##############################################
################## S3 Bucket #################
##############################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3bucket
      AccessControl: Private
################## Out-Put ###################
##############################################
Outputs:
  RuntimeLambdaUrl:
    Value: !GetAtt GraphQLExecuteLambdaUrl.FunctionUrl